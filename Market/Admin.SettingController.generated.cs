// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Market.Areas.Admin.Controllers
{
    public partial class SettingController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SettingController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditSlide()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlide);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteSlide()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlide);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DetailsSlide()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DetailsSlide);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SettingController Actions { get { return MVC.Admin.Setting; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Setting";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Setting";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string EditSetting = "EditSetting";
            public readonly string AddSlide = "AddSlide";
            public readonly string ListSlide = "ListSlide";
            public readonly string EditSlide = "EditSlide";
            public readonly string DeleteSlide = "DeleteSlide";
            public readonly string DetailsSlide = "DetailsSlide";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string EditSetting = "EditSetting";
            public const string AddSlide = "AddSlide";
            public const string ListSlide = "ListSlide";
            public const string EditSlide = "EditSlide";
            public const string DeleteSlide = "DeleteSlide";
            public const string DetailsSlide = "DetailsSlide";
        }


        static readonly ActionParamsClass_EditSetting s_params_EditSetting = new ActionParamsClass_EditSetting();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditSetting EditSettingParams { get { return s_params_EditSetting; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditSetting
        {
            public readonly string viewModel = "viewModel";
        }
        static readonly ActionParamsClass_AddSlide s_params_AddSlide = new ActionParamsClass_AddSlide();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddSlide AddSlideParams { get { return s_params_AddSlide; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddSlide
        {
            public readonly string viewModel = "viewModel";
            public readonly string uploadImage = "uploadImage";
        }
        static readonly ActionParamsClass_EditSlide s_params_EditSlide = new ActionParamsClass_EditSlide();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditSlide EditSlideParams { get { return s_params_EditSlide; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditSlide
        {
            public readonly string id = "id";
            public readonly string viewModel = "viewModel";
            public readonly string uploadImage = "uploadImage";
        }
        static readonly ActionParamsClass_DeleteSlide s_params_DeleteSlide = new ActionParamsClass_DeleteSlide();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSlide DeleteSlideParams { get { return s_params_DeleteSlide; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSlide
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_DetailsSlide s_params_DetailsSlide = new ActionParamsClass_DetailsSlide();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DetailsSlide DetailsSlideParams { get { return s_params_DetailsSlide; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DetailsSlide
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AddSlide = "AddSlide";
                public readonly string DetailsSlide = "DetailsSlide";
                public readonly string EditSetting = "EditSetting";
                public readonly string EditSlide = "EditSlide";
                public readonly string ListSlide = "ListSlide";
            }
            public readonly string AddSlide = "~/Areas/Admin/Views/Setting/AddSlide.cshtml";
            public readonly string DetailsSlide = "~/Areas/Admin/Views/Setting/DetailsSlide.cshtml";
            public readonly string EditSetting = "~/Areas/Admin/Views/Setting/EditSetting.cshtml";
            public readonly string EditSlide = "~/Areas/Admin/Views/Setting/EditSlide.cshtml";
            public readonly string ListSlide = "~/Areas/Admin/Views/Setting/ListSlide.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SettingController : Market.Areas.Admin.Controllers.SettingController
    {
        public T4MVC_SettingController() : base(Dummy.Instance) { }

        [NonAction]
        partial void EditSettingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSetting()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSetting);
            EditSettingOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EditSettingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, WebMarket.ViewModel.Admin.Setting.EditSettingDataEntry viewModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditSetting(WebMarket.ViewModel.Admin.Setting.EditSettingDataEntry viewModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSetting);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            EditSettingOverride(callInfo, viewModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddSlide()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddSlide);
            AddSlideOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, WebMarket.ViewModel.Admin.Setting.SlideShowDataEntry viewModel, System.Web.HttpPostedFileBase uploadImage);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddSlide(WebMarket.ViewModel.Admin.Setting.SlideShowDataEntry viewModel, System.Web.HttpPostedFileBase uploadImage)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddSlide);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "uploadImage", uploadImage);
            AddSlideOverride(callInfo, viewModel, uploadImage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListSlide()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListSlide);
            ListSlideOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EditSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlide(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlide);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditSlideOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, WebMarket.ViewModel.Admin.Setting.SlideShowDataEntry viewModel, System.Web.HttpPostedFileBase uploadImage);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditSlide(WebMarket.ViewModel.Admin.Setting.SlideShowDataEntry viewModel, System.Web.HttpPostedFileBase uploadImage)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditSlide);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "uploadImage", uploadImage);
            EditSlideOverride(callInfo, viewModel, uploadImage);
            return callInfo;
        }

        [NonAction]
        partial void DeleteSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteSlide(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteSlide);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteSlideOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void DetailsSlideOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DetailsSlide(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DetailsSlide);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DetailsSlideOverride(callInfo, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
